# # Задача из домашки №6: Заполните массив элементами арифметической
# # прогрессии. Её первый элемент, разность и количество
# # элементов нужно ввести с клавиатуры. Формула для
# # получения n-го члена прогрессии: 
# # an = a1 + (n-1) * d.
# # Каждое число вводится с новой строки.

# # Ввод: 7 2 5
# # Вывод: 7 9 11 13 15

# a1 = 7
# d = 2
# n = 5
# res_list = []

# # a1 + (1 - 1) * d
# # a1 + (2 - 1) * d
# # a1 + (3 - 1) * d
# for i in range(1, n + 1):
#     res_list.append(a1 + (i - 1) * d)

# print(res_list)

# ---------------------------------------------------------------------------------------------------
# У вас есть код, который вы не можете менять (так часто бывает, когда код в глубине
# программы используется множество раз и вы не хотите ничего сломать):
# transformation = <???>
# values = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29] # или любой другой список
# transormed_values = list(map(transformation, values))
# Единственный способ вашего взаимодействия с этим кодом - посредством задания
# функции transformation.
# Однако вы поняли, что для вашей текущей задачи вам не нужно никак преобразовывать
# список значений, а нужно получить его как есть.
# Напишите такое лямбда-выражение transformation, чтобы transformed_values получился
# копией values.

# Ввод:
# values = [1, 23, 42, ‘asdfg’]
# transformed_values = list(map(trasformation, values))
# if values == transformed_values:
#  print(‘ok’)
# else:
#  print(‘fail’)
# Вывод:
# ok

# def transformation(x):
#     return x

# transformation = lambda x: x
# values = [1, 23, 42, 'asdfg']
# transformed_values = list(map(transformation, values))
# if values == transformed_values:
#     print('ok')
# else:
#     print('fail')

# -----------------------------------------

# transformation = lambda x: x * 2
# values = [1, 23, 42]
# transformed_values = set(map(transformation, values))
# print(transformed_values)

# list1 = list(map(int, input('Введите список: ').split(' ')))
# print(list1)

# ---------------------------------------------------------------------------------------------

# Планеты вращаются вокруг звезд по эллиптическим орбитам.
# Назовем самой далекой планетой ту, орбита которой имеет
# самую большую площадь. Напишите функцию
# find_farthest_orbit(list_of_orbits), которая среди списка орбит
# планет найдет ту, по которой вращается самая далекая
# планета. Круговые орбиты не учитывайте: вы знаете, что у
# вашей звезды таких планет нет, зато искусственные спутники
# были были запущены на круговые орбиты. Результатом
# функции должен быть кортеж, содержащий длины полуосей
# эллипса орбиты самой далекой планеты. Каждая орбита
# представляет из себя кортеж из пары чисел - полуосей ее
# эллипса. Площадь эллипса вычисляется по формуле S = pi*a*b,
# где a и b - длины полуосей эллипса. При решении задачи
# используйте списочные выражения. Подсказка: проще всего
# будет найти эллипс в два шага: сначала вычислить самую
# большую площадь эллипса, а затем найти и сам эллипс,
# имеющий такую площадь. Гарантируется, что самая далекая
# планета ровно одна

# Ввод:
# orbits = [(1, 3), (2.5, 10), (7, 2), (6, 6), (4, 3)]
# print(*find_farthest_orbit(orbits))
# Вывод:
# 2.5 10

# from math import pi

# def find_farthest_orbit(list_of_orbits):
#     # убрать круговые орбиты
#     # найти площадь по формуле
#     # для наибольшей площади находим полуоси(индексы)
#     print(list_of_orbits)
#     list_orb = [el for el in list_of_orbits if el[0] != el[1]] # убрать круговые орбиты 
#     print(list_orb)
#     list_s = [el[0] * el[1] * pi for el in list_orb] # найти площадь по формуле
#     print(list_s)
#     index_max = list_s.index(max(list_s)) # для наибольшей площади находим индексы
#     print(index_max)
#     return list_orb[index_max]


# # orbits = [(1, 3), (2.5, 10), (7, 2), (6, 6), (4, 3)]
# orbits = [(1, 3), (2.5, 10), (7, 2), (6, 6), (4, 3), (10, 20)]

# print(*find_farthest_orbit(orbits))


# # list1 = [78, 89, 45]
# # print(list1.index(89)) # 1


# ----------------------------------------------------------------------------------------------------

# Напишите функцию same_by(characteristic, objects), которая
# проверяет, все ли объекты имеют одинаковое значение
# некоторой характеристики, и возвращают True, если это так.
# Если значение характеристики для разных объектов
# отличается - то False. Для пустого набора объектов, функция
# должна возвращать True. Аргумент characteristic - это
# функция, которая принимает объект и вычисляет его
# характеристику.
# Ввод:                       Вывод:
# values = [0, 2, 10, 6]      same

# values = [0, 3, 10, 6]      different


# def same_by(characteristic, objects):
#     return len(list(filter(characteristic, objects))) == 0

# values = [4, 17, 20] 
# if same_by(lambda x: x % 4, values):
#     print('same')
# else:
#     print('different')

#####

